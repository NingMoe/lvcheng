package com.lvoutcity.model;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.lvoutcity.core.util.Constants;
import com.lvoutcity.model.base.BaseCorps;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Corps extends BaseCorps<Corps> {
	public static final Corps dao = new Corps();
	
	public Corps findCorpsByTime(String routeNo,Date missTime){
	    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");  
        
        String formatDate = df.format(missTime); 
		return Corps.dao.findFirst("select * from t_corps where id = '"+routeNo +"' and mission_time ='"+formatDate+"'");
	}
	
	public static Page<Record> conditionedPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		StringBuffer sql = new StringBuffer("from t_corps c "
				+ "left join (SELECT  GROUP_CONCAT(nick_name) as leader_names, cl.corps_id ,GROUP_CONCAT(leader_id) as leader_ids FROM t_corps_leader cl left join t_user u ON u.id = cl.leader_id group by corps_id) l ON l.corps_id = c.id  "
				+ "left join (select sum(1) as order_num,corps_id from t_order_record group by corps_id )ord on ord.corps_id = c.id "
				+ "where is_delete='1'");
		params.entrySet().forEach(map -> sql.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		sql.append(" order by c.mission_time ");
		return Db.paginate(pageNumber, pageSize, "select c.*,DATE_FORMAT(c.mission_time,'%Y-%m-%d') mission_time,DATE_FORMAT(c.start_time,'%Y-%m-%d') start_time,DATE_FORMAT(c.end_time,'%Y-%m-%d') end_time,l.*,ord.*", sql.toString());
	}
	
	public static Page<Record> conditionedPaginateAsc(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		StringBuffer sql = new StringBuffer("from t_corps c "
				+ "left join (SELECT  GROUP_CONCAT(nick_name) as leader_names, cl.corps_id ,GROUP_CONCAT(leader_id) as leader_ids FROM t_corps_leader cl left join t_user u ON u.id = cl.leader_id group by corps_id) l ON l.corps_id = c.id  "
				+ "left join (select sum(1) as order_num,corps_id from t_order_record where is_delete='1' group by corps_id )ord on ord.corps_id = c.id "
				+ "where is_delete='1'");
		params.entrySet().forEach(map -> sql.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		sql.append(" order by c.mission_time asc");
		return Db.paginate(pageNumber, pageSize, "select c.*,DATE_FORMAT(c.mission_time,'%Y-%m-%d') mission_time,DATE_FORMAT(c.start_time,'%Y-%m-%d') start_time,DATE_FORMAT(c.end_time,'%Y-%m-%d') end_time,l.*,ord.*", sql.toString());
	}
	
	/**
	 * 是否有订单
	 * @return
	 */
	public boolean hasOrder(){
		int size = OrderRecord.dao.find("select 1 from t_order_record where corps_id = '"+getId()+"'").size();
		if(size>0)
			return true;
		else
			return false;
	}
	
	public RouteMag route(){
		return RouteMag.dao.findFirst("select * from t_route_mag where id = '"+getRouteId()+"'");
	}
	
	/**
	 * 聊天群的名字
	 * @return
	 */
	public String groupName(){
		return route().getRouteName()+"-"+new java.text.SimpleDateFormat("yyyy-MM-dd").format(getMissionTime());
	}
	public BigDecimal queryMinPrice(String routeId){
		return Corps.dao.findFirst("select  min(now_the_price) as now_the_price from t_corps"
				+ " where is_delete = '1' "
				+ " and status = '"+Constants.CORP.STATUS_ON_SHELF+"'"
				+ " and route_id='"+routeId+"' "
				+ " and mission_time > '"+new java.text.SimpleDateFormat("yyyy-MM-dd").format(new Date())+"'").getNowThePrice();
	}
	public BigDecimal queryMaxPrice(String routeId){
		return Corps.dao.findFirst("select  max(original_price) as original_price from t_corps where route_id='"+routeId+"'").getOriginalPrice();
	}
	
	/**
	 * 根据路线id获取团期
	 * @param routeId
	 * @return
	 */
	public List<Date> queryMisstion(String routeId){
		List<Date> misstion = new ArrayList<Date>();
		List<Corps> corpsList = Corps.dao.find("select * from t_corps where route_id = '"+routeId+"' and is_delete='1' and status='2' and date(now()) between start_time and end_time");
		 if(corpsList.size()>0){
			 for(Corps corps :corpsList){
					misstion .add(corps.getMissionTime()) ;
				 }
		 }
		 return misstion; 
	}
	
	public List<Corps> queryCorps(String misstion) throws ParseException{
		java.sql.Date goodsC_date = java.sql.Date.valueOf(misstion);
    	return Corps.dao.find("select * from t_corps where mission_time like '%"+goodsC_date +"%'");
	}
	
	
	/**
	 * 
	 * @Title: queryCorpsList 
	 * @Description: 当前线路所有团期 
	 * @param @return    设定文件 
	 * @return List<>    返回类型 
	 * @create_time 2016下午5:51:17
	 * @create_user James w.s
	 * @throws
	 */
	
	///AND DATE(NOW()) BETWEEN start_time  AND end_time
	public List<Record> queryCorpsList(String routeId){
		return Db.find(" SELECT  result.* "
				+ " FROM "
				+ "     (SELECT  " 
				+ "         id AS id, "
				+ "             now_the_price AS nowThePrice, "
				+ "             child_price AS childPrice, "
				+ "             mission_time AS missionTime, " 
				+ "             start_time AS startTime, "
				+ "             end_time AS endTime, " 
				+ "             mission_end AS missionEnd, "
				+ "             sign_up_begin AS signUpBegin, " 
				+ "             sign_up_end AS signUpEnd, "
				+ "             route_id AS routeId, " 
				+ "             case "
                + "             when t.total is not null then (c.stock - t.total) " 
                + "             else c.stock "
                + "             end "
                + "             AS stockLeft " 
				+ "     FROM "
				+ "         t_corps c "
				+ "         LEFT JOIN "
				+ "         (SELECT  " 
				+ "         corps_id, SUM(participants_number) total " 
				+ "         FROM t_order_record where is_delete = '1' and status not in ( ? , ? )"
				+ "         GROUP BY corps_id) t "
				+ "         ON c.id = t.corps_id "
				+ "     WHERE "
				+ "         route_id= ? "
				+ "         and    c.status = 2 "
				+ "         AND DATE(NOW()) BETWEEN c.start_time AND c.end_time  "
				+ "         AND c.is_delete = '1') result "
				+ " WHERE " 
				+ "     stockLeft > 0",Constants.ORDER.STATUS_CANCLED_BACK,Constants.ORDER.STATUS_CANCLED_USER,routeId);
	}
	
	/**
	 * 团期是否可以购买 
	 * @return
	 * @throws ParseException 
	 */
	public String confirmAvailable() throws ParseException{
		// 团期不是上架状态
		if(!getStatus().equals(Constants.CORP.STATUS_ON_SHELF)){
			return "团期已下架！";
		}
		//已经超过了报名截止日期
		if(getEndTime().before(new Date())){
			return "报名已截止！";
		}
		RouteMag route = RouteMag.dao.findById(getRouteId());
		return route.confirmAvailable(); 
	}
	
	/**
	 * 团期的库存是否允许购买
	 * @param cid 团期ID
	 * @param pNum 订单人数
	 * @return
	 */
	public boolean corpsStockAvailable(int pNum){
		Record r =Db.findFirst("select sum(participants_number) as total from t_order_record "
				+ " where corps_id = ? and status not in (?,?) and is_delete = '1'",getId(),Constants.ORDER.STATUS_CANCLED_BACK,Constants.ORDER.STATUS_CANCLED_USER);
		if(r.get("total")!=null){
			String total = r.get("total").toString();
			int left =(int) (getStock() - Integer.valueOf(total));
			return left >= pNum;
		}else{
			return getStock() > 0;
		}
	}
	
}
