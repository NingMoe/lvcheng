package com.lvoutcity.model;

import java.util.HashMap;
import java.util.List;

import com.alibaba.fastjson.JSON;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.lvoutcity.core.util.Constants;
import com.lvoutcity.model.base.BaseOrderRecord;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class OrderRecord extends BaseOrderRecord<OrderRecord> {
	public static final OrderRecord dao = new OrderRecord();
	//改成可配置
	  String contactManager="联系领队";
	  String forwarding="转发";
	  String navigatePoint="导航到集合点";
	  String contactService="联系客服";
	  String cancelOrder="取消订单";
	  String checkNotes="查看游记";
	
	public static Object queryFunctions(int status){
		
		 OrderFunction orderFunction =OrderFunction.dao.findById(status);
		return JSON.parse(orderFunction.getFunction());
	}
	/**
	 * Paginate search with condition
	 * @param params
	 * @param pageNumber
	 * @param pageSize
	 * @param orderCol
	 * @param orderDir
	 * @return
	 */
	public Page<Record> conditionedPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		String selectStr = "SELECT DATE_FORMAT(c.mission_time,'%Y-%m-%d') as mission_time,ord.*,DATE_FORMAT(ord.create_time,'%Y-%m-%d %H:%m:%s') as create_time,rm.route_name,rm.route_no,u.user_no,u.phone_number,tc.club_short_name";
		
		StringBuffer otherStr = new StringBuffer(" FROM"
				+ " t_order_record ord "
				+ " left join"
				+ " t_corps c ON ord.corps_id = c.id"
				+ " and c.is_delete = '1'"
				+ " left join"
				+ " t_user u ON ord.create_user = u.id"
				+ " left join"
				+ " t_route_mag rm ON rm.id = c.route_id"
				+ " and rm.is_delete = '1'"
				+ " and c.is_delete = '1'"
				+ " left join"
				+ " t_tourism_club tc ON tc.id = rm.club_id"
				+ " and tc.is_delete = '1'"
				+ " and rm.is_delete = '1'"
				);
		StringBuffer whereStr = new StringBuffer(" where ord.is_delete!=0 ");
		params.entrySet().forEach(map -> whereStr.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		otherStr.append(whereStr).append(" order by ord.order_no desc");

		return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
	} 
	
	public Record getDetailById(String id){

		StringBuffer selectStr = new StringBuffer("SELECT "
				+ "DATE_FORMAT(c.mission_time,'%Y-%m-%d') as mission_time,"
				+ "ord.*,"
				+ "rm.route_name,"
				+ "rm.route_no,"
				+ "u.user_no,"
				+ "u.phone_number,"
				+ "tc.club_name,"
				+ "pl.pay_type");
		StringBuffer otherStr = new StringBuffer(" FROM"
				+ " t_order_record ord "
				+ " left join"
				+ " t_pay_log pl ON ord.id = pl.order_id and pay_status = '1' and operation = 0"
				+ " left join"
				+ " t_corps c ON ord.corps_id = c.id"
				+ " and c.is_delete = '1'"
				+ " left join"
				+ " t_user u ON ord.create_user = u.id"
				+ " left join"
				+ " t_route_mag rm ON rm.id = c.route_id"
				+ " and rm.is_delete = '1'"
				+ " and c.is_delete = '1'"
				+ " left join"
				+ " t_tourism_club tc ON tc.id = rm.club_id"
				+ " and tc.is_delete = '1'"
				+ " and rm.is_delete = '1'"
				);
		selectStr.append(otherStr).append(" where ord.is_delete = '1' and ord.id = '"+id+"'");
		return Db.findFirst(selectStr.toString());
	}
	
	public Page<Record> groupByCorpsPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		String selectStr = "SELECT DATE_FORMAT(c.mission_time,'%Y-%m-%d') as mission_time,rm.route_no, rm.route_name,tc.club_name,ord_p.*,ord_up.*";
		
		StringBuffer otherStr = new StringBuffer("  FROM t_corps c left join t_route_mag rm "
				+ "ON c.route_id = rm.id and c.is_delete = '1' and rm.is_delete = '1' "
				+ "left join t_tourism_club tc "
				+ "on tc.id = rm.club_id and tc.is_delete='1' and rm.is_delete='1' "
				+ "left join "
					+ "(select corps_id,count(1) as order_paid, sum(fee_total) as fee_paid ,sum(participants_number) as participants_number "
					+ "from t_order_record "
					+ "where is_delete = '1' and status not in ('"+Constants.ORDER.STATUS_CANCLED_BACK+"','"+Constants.ORDER.STATUS_CANCLED_USER+"','"+Constants.ORDER.STATUS_UNPAID+"') group by corps_id) ord_p "
				+ "on ord_p.corps_id = c.id "
				+ "left join "
					+ "(select corps_id,count(1) as order_unpaid, sum(fee_total) as fee_unpaid ,sum(participants_number) as participants_number_unpaid "
					+ " from "
					+ "t_order_record where is_delete = '1' and status = '"+Constants.ORDER.STATUS_UNPAID+"' group by corps_id) ord_up "
				+ "on ord_up.corps_id = c.id ");
		StringBuffer whereStr = new StringBuffer(" where c.is_delete = '1' ");
		params.entrySet().forEach(map -> whereStr.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		otherStr.append(whereStr).append(" order by c.mission_time desc");
		return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
	} 
	
	public List<OrderRecord> queryOrderRecord(String userId){
		return OrderRecord.dao.find("select order_no,corps_id,status from t_order_record where create_user='"+userId +"' and is_delete=1");
	}
	
	public OrderRecord findByNo(long no){
		return OrderRecord.dao.findFirst("select * from t_order_record where order_no="+ String.valueOf(no));
	}
	
	public OrderRecord findByUserId(String userId,long orderNo){
		return OrderRecord.dao.findFirst("select * from t_order_record where create_user='"+userId+"' and order_no="+orderNo );
	}
	
	/**
	 * 
	 * @Title: queryOrderRecordStatus 
	 * @Description: 查询用户是否有未支付的订单 
	 * @param @param userId
	 * @param @return    设定文件 
	 * @return OrderRecord    返回类型 
	 * @create_time 2016下午5:36:41
	 * @create_user James w.s
	 * @throws
	 */
	public OrderRecord queryOrderRecordStatus(String userId){
		return OrderRecord.dao.findFirst("select order_no,corps_id,status from t_order_record where create_user='"+userId +"' and is_delete=1 and status ='"+Constants.ORDER.STATUS_UNPAID+"' ");
	}
	
	public PayLog latestSuccessLog(){
		return PayLog.dao.findFirst("select * from t_pay_log where pay_status = '1' and order_id ='"+this.getId()+"' order by create_time desc");
	}
	
	
	public OrderRecord findByTradeNo(String tradeNo,String payType){
		PayLog log = PayLog.dao.findFirst("select * from t_pay_log where pay_type = '"+payType+"' and pay_status = '"+Constants.PAY.STATUS_SUCCESS+"' and tpp_trade_no ='"+tradeNo+"' order by create_time desc");
		return findById(log.getOrderId());
	}
	
}
