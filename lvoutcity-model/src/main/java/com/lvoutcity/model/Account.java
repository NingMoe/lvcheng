package com.lvoutcity.model;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.lvoutcity.core.util.Constants;
import com.lvoutcity.model.base.BaseAccount;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Account extends BaseAccount<Account> {
	public static final Account dao = new Account();

	/**
	 * Paginate search with condition
	 * @param params
	 * @param pageNumber
	 * @param pageSize
	 * @param orderCol
	 * @param orderDir
	 * @return
	 */
	public Page<Record> conditionedPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		String selectStr = "SELECT a.account_id, a.account_no,a.payment_mode,a.account_status,DATE_FORMAT(a.create_date,'%Y-%m-%d') as create_date, "
				+"DATE_FORMAT(a.start_date,'%Y-%m-%d') as start_date,DATE_FORMAT(a.end_date,'%Y-%m-%d') as end_date,"            
				+"a.account_amount,a.note, c.club_name";
		
		StringBuffer otherStr = new StringBuffer(" FROM"
				+ " t_account a "
				+ " left join t_tourism_club c ON a.club_id = c.id"
				);
		StringBuffer whereStr = new StringBuffer(" where 1=1 ");
		params.entrySet().forEach(map -> whereStr.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		otherStr.append(whereStr).append(" order by a.account_no desc");

		try {
			return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
	}
	
	/**
	 * Paginate search with condition
	 * @param params
	 * @param pageNumber
	 * @param pageSize
	 * @param orderCol
	 * @param orderDir
	 * @return
	 */
	public Page<Record> detailPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		String selectStr = "SELECT o.id AS order_id, o.order_no, r.route_no, r.route_name, DATE_FORMAT(c.mission_time,'%Y-%m-%d') as mission_time, o.participants_number, o.fee_total, o.order_rebate,"
				            +"o.order_commission, a.account_status, (o.fee_total-o.order_commission) as net_receipts ";
		
		StringBuffer otherStr = new StringBuffer(" FROM"
				+ " t_order_record o"
				+ " left join t_account a ON o.account_id = a.account_id"
				+ " left join t_corps c ON o.corps_id = c.id"
				+ " left join t_route_mag r ON c.route_id = r.id"
				);
		StringBuffer whereStr = new StringBuffer(" where 1=1 ");
		params.entrySet().forEach(map -> whereStr.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		otherStr.append(whereStr).append(" order by o.order_time desc");

		try {
			return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Db.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
	}
	
	public List<Record> getNotAccountedClubs(Date end_date) {
		SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATE.DATE_ALL);
		String sql = "SELECT DISTINCT tc.* "
				+ "FROM t_order_record o LEFT JOIN t_corps c ON o.`corps_id` = c.`id`"
				+" LEFT JOIN t_route_mag r ON c.`route_id`=r.`id`"
				+" LEFT JOIN t_tourism_club tc ON tc.id = r.`club_id`";
		String wherestr = " where  o.is_delete='1' and  o.status='"+Constants.ORDER.STATUS_TRIP_FINISH+"' and o.account_status='"+Constants.ORDER.ACCOUNT_STATUS_NOT_ACCOUNTED+"' and o.create_time <= '"+sdf.format(end_date)+"'";
		
		try {
			return Db.find(sql+wherestr);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return Db.find(sql+wherestr);
	}

	public BigDecimal bindAccountAndReturnAmount(String clubId, String accountId, Date end_date) {
		SimpleDateFormat sdf = new SimpleDateFormat(Constants.DATE.DATE_ALL);
		String sql = "SELECT o.* "
				+" FROM t_order_record o LEFT JOIN t_corps c ON o.`corps_id` = c.`id`"
				+" LEFT JOIN t_route_mag r ON c.`route_id`=r.`id`"
				+" LEFT JOIN t_tourism_club tc ON tc.id = r.`club_id`"
				+" where  o.is_delete='1' and  tc.id ='"+clubId+"'";
		String wherestr = " and o.status='"+Constants.ORDER.STATUS_TRIP_FINISH+"' and o.account_status='"+Constants.ORDER.ACCOUNT_STATUS_NOT_ACCOUNTED+"' and o.create_time <='"+sdf.format(end_date)+"'";
		List<OrderRecord> orders = OrderRecord.dao.find(sql+wherestr);
		BigDecimal amount = new BigDecimal(0);
		for (OrderRecord o : orders) {
			amount = amount.add(o.getFeeTotal().subtract(o.getOrderCommission()));//总金额减去分润
			o.setAccountId(accountId);
			o.setAccountStatus(Constants.ORDER.ACCOUNT_STATUS_ACCOUNTED);
			o.update();
		}
		return amount;
	}
}
