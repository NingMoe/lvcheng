package com.lvoutcity.model;

import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import com.lvoutcity.core.util.Constants;
import com.lvoutcity.core.util.SQuery;
import com.lvoutcity.model.base.BaseWallet;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class Wallet extends BaseWallet<Wallet> {
	public static final Wallet dao = new Wallet();
	
	/**
	 * 查询订单对应的冻结（预支出）的金币记录
	 * @param orderId
	 * @return
	 */
//	public Wallet preChargeRecord(String orderId){
//		Wallet w = dao.findFirst("select * from t_wallet where status = '"+Constants.WALLET.STATUS_PRE_OUT+"' and orderId='"+orderId+"' and is delete='1'");
//		return w;
//	}
	
	/**
	 * 取消订单对应的预收入
	 * @param orderId
	 */
	public void cancelPredone(String orderId){
		Db.update("update t_wallet set is_delete='0' where status = '"+Constants.WALLET.STATUS_PRE_IN+"' and order_id = '"+orderId+"'");
	}
	
	/**
	 * 查询订单对应的预收入记录
	 * @param orderId
	 * @return
	 */
	public List<Wallet> preInRecords(String orderId){
		List<Wallet> w = dao.find("select * from t_wallet where status = '"+Constants.WALLET.STATUS_PRE_IN+"' and order_id='"+orderId+"' and is_delete='1'");
		return w;
	}
	
	public Wallet findByOrderId(String id){
		return Wallet.dao.findFirst("select * from t_wallet where is_delete = '1' and  order_id = '"+id+"'");

	}
	
	public Wallet findByOrderIdStatus(String id,String status){
		return Wallet.dao.findFirst("select * from t_wallet where is_delete = '1' and status = '"+status+"' and  order_id = '"+id+"'");

	}
	
	/**
	 * 查询用户的更获得的金币
	 * @param userId
	 * @return
	 */
	public Record queryObtainGolds(String userId){
		return Db.findFirst("select sum(money) as money from t_wallet where status='2' and user_id='"+userId+"'");
	}
	
	public Record queryRestMoney(String userId){
		return Db.findFirst("select money as restMoney from t_user_wallet where user_id='"+userId+"'");
	}
	
	
	
	public Record queryPartners(String userId){
		
		return Db.findFirst("select count(*) as partners from t_user_member m where referee_level_1 = '"+userId+"'"
				           +" or referee_level_2 = '"+userId+"'"
				           +" or referee_level_3 = '"+userId+"'");
	}
	
	public List<Record> queryUserMoney(String level,String userId,String page,String size){
		
		SQuery sql = SQuery.create("select  u.nick_name as nickName,u.phone_number as phoneNumber,u.id as userId,");
		sql.append(" (select sum(w.money) from t_wallet w where w.user_id = '"+userId+"' and w.create_user = m.user_id and is_delete='1') as money ");
		sql.append(" from t_user_member m  ");
		sql.append(" left join t_user u  on u.id = m.user_id ");
		sql.append(" where 1=1 ");
		if("1".equals(level)){
			sql.append(" and m.referee_level_1 = '"+userId+"'");
		}
		if("2".equals(level)){
			sql.append(" and m.referee_level_2 = '"+userId+"'");
		}
		if("3".equals(level)){
			sql.append(" and m.referee_level_3 = '"+userId+"'");
		}
		sql.append(" order by m.create_time desc ");
		sql.append(" limit " +page+ " , " + size);
		return Db.find(sql.getSQuery());
	}
	
	public List<Wallet> WithdrawalRecordList(String userId){
		return Wallet.dao.find("select * from t_wallet where user_id='"+userId+"' and is_delete='1' and status in('1','2','3') order by create_time desc" );
	}	
}
