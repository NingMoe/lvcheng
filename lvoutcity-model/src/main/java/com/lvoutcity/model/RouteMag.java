package com.lvoutcity.model;

import java.util.HashMap;
import java.util.List;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.lvoutcity.core.util.Constants;
import com.lvoutcity.model.base.BaseRouteMag;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class RouteMag extends BaseRouteMag<RouteMag> {
	public static final RouteMag dao = new RouteMag();
	
	/**
	 * Paginate search with condition
	 * @param params
	 * @param pageNumber
	 * @param pageSize
	 * @param orderCol
	 * @param orderDir
	 * @return
	 */
	public Page<RouteMag> conditionedPaginate(HashMap<String,String> params,int pageNumber, int pageSize, String orderCol,String orderDir){
		String selectStr = "select rm.guide_id,rm.festival,rm.route_name,rm.status,rm.club_id,rm.percentage,rm.id,rm.route_no,rm.refuse_msg,"
				+ "DATE_FORMAT(rm.submit_time,'%Y-%m-%d %T') as submitTimeStr,"
				+ "g.guide_no as guideNo,"
				+ "tc.club_name,"
				+ "tcu.user_name as createUserName,"
				+ "tsu.user_name as submitUserName,"
				+ "tvu.user_name as verifyUserName";
		
		StringBuffer otherStr = new StringBuffer(" from t_route_mag rm "
				+ " left join t_guide g on rm.guide_id = g.id "
				+ " left join t_tourism_club tc on rm.club_id = tc.id and tc.is_delete!=0  "
				+ " left join t_user_backgroup tcu on tcu.user_id = rm.create_user"
				+ " left join t_user_backgroup tsu on tsu.user_id = rm.submit_user"
				+ " left join t_user_backgroup tvu on tvu.user_id = rm.verify_user"
				);
		StringBuffer whereStr = new StringBuffer(" where rm.is_delete!=0 ");
		params.entrySet().forEach(map -> whereStr.append(" and ").append(map.getKey()).append("='").append(map.getValue()).append("'"));
		otherStr.append(whereStr).append(" order by rm.route_no desc");

		return dao.paginate(pageNumber, pageSize, selectStr, otherStr.toString());
	} 
	
	public String getCreateUserName(){
		return get("createUserName");
	}
	public String getSubmitUserName(){
		return get("submitUserName");
	}
	public String getVerifyUserName(){
		return get("verifyUserName");
	}
	public String getSubmitTimeStr(){
		return get("submitTimeStr");
	}
	public String getClubName(){
		return get("club_name");
	}
	public Integer getGuideNo(){
		return get("guideNo");
	}

    public void setDuration(java.lang.String  duration){
 	   set("duration",duration);
    }
    public java.lang.String getDuration(){
 	   return get("duration");
    }
    public void setNight(java.lang.String night){
 	   set("night",night);
    }
    public java.lang.String getNight(){
 	   return get("night");
    }
    
    public void setClubName(java.lang.String clubName){
 	   set("club_name",clubName);
    }
    public void setNowThePrice(java.math.BigDecimal nowThePrice) {
		set("now_the_price", nowThePrice);
	   }

	  public java.math.BigDecimal getNowThePrice() {
		return get("now_the_price");
	   }

	
	public Record searchWithGuide(String id){
		return Db.findFirst("select rm.*,g.name as guide_name,case when g.duration>g.night then g.duration else g.night end as day_count from t_route_mag rm left join t_guide g on rm.guide_id = g.id where rm.is_delete!=0 and g.is_delete!=0 and rm.id = '"+id+"'");
	}
	
	public boolean hasCorps(String id){
		return (Corps.dao.find("select * from t_corps where is_delete = 1 and route_id = '"+id+"';").size()>0);
	}
	
	public RouteMag findByRouteNo(Integer routeNo){
		return RouteMag.dao.findFirst("select * from t_route_mag where route_no=?",routeNo);
	}
	public boolean hasOrder(String id){
		return (OrderRecord.dao.find("select * from t_order_record ord left join t_corps c on c.id = ord.corps_id where c.is_delete='1' and ord.is_delete = 1 and c.route_id = '"+id+"';").size()>0);
	}
	
	public int dayCount(){
		return Itinerary.dao.find("select count(1) from t_itinerary where route_id = '"+getId()+"'").size(); 
	}
	
	/**
	 * 根据app当前城市获取路线
	 * @param cityId
	 * @return
	 */
	public List<RouteMag> getRoutesByCityId(int cityId){
		return RouteMag.dao.find("select route.* from t_route_mag as route,t_tourism_club as club where route.city_id = "+cityId +" and route.status = '2' and club.id = route.club_id and club.enabled =1 and club.is_delete=0");
	}

	/**
	 * 通过名称或其他任意字符查询到路线列表
	 * @param value
	 * @return
	 */
	public List<RouteMag> getRoutes(String value){
		return	RouteMag.dao.find("select  route.* from t_route_mag as route,t_tourism_club as club where route.route_name like '%"+value+"%' or route.route_no like '%"+value+"%'"
				+" or route.travel_mode like '%"+value +"%' and route.status ='2' and club.id = route.club_id and club.enabled =1 and club.is_delete=0 GROUP BY route.id" 
				);
	}
	
	public RouteMag queryRouteInfo(String routeId){
		return RouteMag.dao.findFirst("select * from t_route_mag as route where route.id='"+routeId+"'");
	}
	
	/**
	 * 
	 * @Title: getRoutesList 
	 * @Description: 根据攻略id查询线路 攻略是否可以删除
	 * @param @return    设定文件 
	 * @return List<RouteMag>    返回类型 
	 * @create_time 2016 2016年6月29日 下午5:25:01
	 * @create_user James w.s
	 * @throws
	 */
	public List<RouteMag> queryRoutesList(String id){
		return dao.find("select * from t_route_mag where guide_id ='"+id+"'");
	}
	
	
	public String confirmAvailable(){
		// 线路不是上架状态
		if(!this.getStatus().equals(Constants.ROUTE.STATUS_ON_SHELF)){
			return "线路未上架！";
		}
		if(!this.getIsDelete().equals("1")){//不会进来的应该
			return "线路已删除！";
		}
		TourismClub club = TourismClub.dao.findById(this.getClubId());
		if(club==null){
			return "俱乐部异常！";
		}
		if(!club.getEnabled().equals("1")){
			return "俱乐部非启用状态！";
		}
		return null;
	}
	
	public static boolean nameExisted(String name, String id){
		Record r = Db.findFirst("select count(1) as count from t_route_mag where id != ? and is_delete = '1' and route_name = ? ",id, name);
		return r.getLong("count") > 0 ;
	}
}
